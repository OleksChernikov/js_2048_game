{"version":3,"sources":["scripts/main.js"],"names":["cells","document","querySelectorAll","score","querySelector","scoreValue","innerText","loseMessage","startMessage","winMessage","grid","mergedCells","gridSize","updateGrid","forEach","cell","index","x","y","Math","floor","value","textContent","className","classList","add","generateNumber","emptyCells","row","push","length","randomCell","random","newValue","scoreInfo","initGame","remove","handleKeyPress","keyEvent","key","moveUp","moveDown","moveLeft","moveRight","resetMergedCells","sumBall","el","checkGameOver","checkWin","moved","targetY","targetX","startButton","addEventListener"],"mappings":"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","file":"main.a20f7307.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst cells = document.querySelectorAll('.field-cell');\nconst score = document.querySelector('.game-score');\nlet scoreValue = score.innerText;\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\n\nlet grid = [\n  [null, null, null, null],\n  [null, null, null, null],\n  [null, null, null, null],\n  [null, null, null, null],\n];\n\nlet mergedCells = [\n  [false, false, false, false],\n  [false, false, false, false],\n  [false, false, false, false],\n  [false, false, false, false],\n];\n\nconst gridSize = 4;\n\nfunction updateGrid() {\n  cells.forEach(function(cell, index) {\n    const x = index % gridSize;\n    const y = Math.floor(index / gridSize);\n    const value = grid[y][x];\n\n    cell.textContent = value !== null ? value : '';\n    cell.className = 'field-cell';\n\n    if (value !== null) {\n      cell.classList.add('field-cell--' + value);\n    }\n  });\n}\n\nfunction generateNumber() {\n  const emptyCells = [];\n\n  grid.forEach(function(row, y) {\n    row.forEach(function(value, x) {\n      if (value === null) {\n        emptyCells.push({\n          x: x, y: y,\n        });\n      }\n    });\n  });\n\n  if (emptyCells.length > 0) {\n    const randomCell\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const newValue = Math.random() < 0.9 ? 2 : 4;\n\n    grid[randomCell.y][randomCell.x] = newValue;\n    updateGrid();\n  }\n  scoreInfo();\n}\n\nfunction initGame() {\n  startMessage.classList.remove('hidden');\n  loseMessage.classList.add('hidden');\n\n  grid = [\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n  ];\n\n  mergedCells = [\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n  ];\n\n  generateNumber();\n  generateNumber();\n}\n\nfunction handleKeyPress(keyEvent) {\n  const key = keyEvent.key;\n\n  if (key === 'ArrowUp') {\n    moveUp();\n  } else if (key === 'ArrowDown') {\n    moveDown();\n  } else if (key === 'ArrowLeft') {\n    moveLeft();\n  } else if (key === 'ArrowRight') {\n    moveRight();\n  }\n}\n\nfunction resetMergedCells() {\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = 0; x < gridSize; x++) {\n      mergedCells[y][x] = false;\n    }\n  }\n}\n\nfunction scoreInfo() {\n  let sumBall = 0;\n\n  cells.forEach((el) => {\n    sumBall += +el.innerText;\n    scoreValue = sumBall;\n  });\n  scoreValue = sumBall;\n  score.innerText = scoreValue;\n}\n\nfunction checkGameOver() {\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = 0; x < gridSize; x++) {\n      if (grid[y][x] === null) {\n        return false;\n      }\n    }\n  }\n\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = 0; x < gridSize - 1; x++) {\n      if (grid[y][x] === grid[y][x + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let x = 0; x < gridSize; x++) {\n    for (let y = 0; y < gridSize - 1; y++) {\n      if (grid[y][x] === grid[y + 1][x]) {\n        return false;\n      }\n    }\n  }\n\n  startMessage.classList.add('hidden');\n  loseMessage.classList.remove('hidden');\n\n  return true;\n}\n\nfunction checkWin() {\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = 0; x < gridSize; x++) {\n      if (grid[y][x] === 2048) {\n        startMessage.classList.add('hidden');\n        winMessage.classList.remove('hidden');\n\n        return true;\n      }\n    }\n  }\n}\n\nfunction moveUp() {\n  resetMergedCells();\n\n  let moved = false;\n\n  for (let x = 0; x < gridSize; x++) {\n    for (let y = 1; y < gridSize; y++) {\n      if (grid[y][x] !== null) {\n        const value = grid[y][x];\n        let targetY = y;\n\n        while (targetY > 0 && grid[targetY - 1][x] === null) {\n          targetY--;\n        }\n\n        if (targetY > 0 && grid[targetY - 1][x] === value\n          && !mergedCells[targetY - 1][x]) {\n          grid[targetY - 1][x] *= 2;\n          grid[y][x] = null;\n          mergedCells[targetY - 1][x] = true;\n          mergedCells[targetY][x] = false;\n          moved = true;\n        } else if (targetY !== y) {\n          grid[targetY][x] = value;\n          grid[y][x] = null;\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateNumber();\n    updateGrid();\n    checkGameOver();\n    checkWin();\n  }\n}\n\nfunction moveDown() {\n  resetMergedCells();\n\n  let moved = false;\n\n  for (let x = 0; x < gridSize; x++) {\n    for (let y = gridSize - 1; y >= 0; y--) {\n      if (grid[y][x] !== null) {\n        const value = grid[y][x];\n        let targetY = y;\n\n        while (targetY < gridSize - 1 && grid[targetY + 1][x] === null) {\n          targetY++;\n        }\n\n        if (targetY < gridSize - 1 && grid[targetY + 1][x] === value\n          && !mergedCells[targetY + 1][x]) {\n          grid[targetY + 1][x] *= 2;\n          grid[y][x] = null;\n          mergedCells[targetY + 1][x] = true;\n          mergedCells[targetY][x] = false;\n          moved = true;\n        } else if (targetY !== y) {\n          grid[targetY][x] = value;\n          grid[y][x] = null;\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateNumber();\n    updateGrid();\n    checkGameOver();\n    checkWin();\n  }\n}\n\nfunction moveLeft() {\n  resetMergedCells();\n\n  let moved = false;\n\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = 1; x < gridSize; x++) {\n      if (grid[y][x] !== null) {\n        const value = grid[y][x];\n        let targetX = x;\n\n        while (targetX > 0 && grid[y][targetX - 1] === null) {\n          targetX--;\n        }\n\n        if (targetX > 0 && grid[y][targetX - 1] === value\n          && !mergedCells[y][targetX - 1]) {\n          grid[y][targetX - 1] *= 2;\n          grid[y][x] = null;\n          mergedCells[y][targetX - 1] = true;\n          mergedCells[y][targetX] = false;\n          moved = true;\n        } else if (targetX !== x) {\n          grid[y][targetX] = value;\n          grid[y][x] = null;\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateNumber();\n    updateGrid();\n    checkGameOver();\n    checkWin();\n  }\n}\n\nfunction moveRight() {\n  resetMergedCells();\n\n  let moved = false;\n\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = gridSize - 1; x >= 0; x--) {\n      if (grid[y][x] !== null) {\n        const value = grid[y][x];\n        let targetX = x;\n\n        while (targetX < gridSize - 1 && grid[y][targetX + 1] === null) {\n          targetX++;\n        }\n\n        if (targetX < gridSize - 1 && grid[y][targetX + 1] === value\n          && !mergedCells[y][targetX + 1]) {\n          grid[y][targetX + 1] *= 2;\n          grid[y][x] = null;\n          mergedCells[y][targetX + 1] = true;\n          mergedCells[y][targetX] = false;\n          moved = true;\n        } else if (targetX !== x) {\n          grid[y][targetX] = value;\n          grid[y][x] = null;\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateNumber();\n    updateGrid();\n    checkGameOver();\n    checkWin();\n    scoreInfo();\n  }\n}\n\nconst startButton = document.querySelector('.button.start');\n\nstartButton.addEventListener('click', function() {\n  initGame();\n  startMessage.classList.add('hidden');\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.innerText = 'Restart';\n});\n\ndocument.addEventListener('keydown', handleKeyPress);\n"]}